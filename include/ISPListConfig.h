#pragma once

#include <stdint.h>

#define NODE_NAME_MAX_SZIE 15

enum PROCESS_TYPE {
	PROCESS_BLC = 0,
	PROCESS_LSC,
	PROCESS_Demosaic,
	PROCESS_WB,
	PROCESS_CC,
	PROCESS_GAMMA,
	PROCESS_WNR,
	PROCESS_EE,
	PROCESS_CST_RAW2RGB,	//NecNode process types should be behand Node process types
	PROCESS_CST_RGB2YUV,
	PROCESS_CST_YUV2RGB,
	PROCESS_HEAD,
	PROCESS_TYPE_NUM
};

const char PROCESSNAME[PROCESS_TYPE_NUM][NODE_NAME_MAX_SZIE] = {
	"BLC",
	"LSC",
	"Demisaic",
	"WB",
	"CC",
	"Gamma",
	"WNR",
	"EE",
	"CST_RAW2RGB",
	"CST_RGB2YUV",
	"CST_YUV2RGB",
	"HEAD",
};

enum NODE_SWITCH {
	NODE_OFF = 0,
	NODE_ON
};

enum NODE_PRIORITY {
	PRIORITY_NECESSARY,
	PRIORITY_FREE,
};

struct ISP_NODE_PROPERTY {
	char name[NODE_NAME_MAX_SZIE];
	PROCESS_TYPE type;
	NODE_SWITCH enable;
	NODE_PRIORITY priority;
};

static ISP_NODE_PROPERTY DefaultNodesConfigure[] = {
	{"HEAD",			PROCESS_HEAD,			NODE_ON,	PRIORITY_NECESSARY},
	{"BLC",				PROCESS_BLC,			NODE_ON,	PRIORITY_FREE},
	{"LSC",				PROCESS_LSC,			NODE_ON,	PRIORITY_FREE},
	{"CST_RAW2RGB",	    PROCESS_CST_RAW2RGB,	NODE_ON,	PRIORITY_NECESSARY},
	{"Demosaic",		PROCESS_Demosaic,		NODE_ON,	PRIORITY_FREE},
	{"WB",				PROCESS_WB,				NODE_ON,	PRIORITY_FREE},
	{"CC",				PROCESS_CC,				NODE_ON,	PRIORITY_FREE},
	{"Gamma",			PROCESS_GAMMA,			NODE_ON,	PRIORITY_FREE},
	{"CST_RGB2YUV",		PROCESS_CST_RGB2YUV,	NODE_ON,	PRIORITY_NECESSARY},
	{"WNR",				PROCESS_WNR,			NODE_ON,	PRIORITY_FREE},
	{"EE",				PROCESS_EE,				NODE_ON,	PRIORITY_FREE},
	{"CST_YUV2RGB",		PROCESS_CST_YUV2RGB,	NODE_ON,	PRIORITY_NECESSARY},
};
